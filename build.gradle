import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext {
        springBootVersion = '3.0.5'
        springCloudVersion = '2022.0.2'
        springCloudAlibabaVersion = '2022.0.0.0'
    }

    repositories {
        maven {
            url 'https://maven.aliyun.com/repository/public/'
        }
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'java-test-fixtures'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply from: 'version.gradle'

description 'Debug project for Spring Boot'

group = 'com.fishep'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_18
    targetCompatibility = JavaVersion.VERSION_18
}

compileJava.options.encoding "UTF-8"
compileTestJava.options.encoding "UTF-8"

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

repositories {
    mavenCentral()
}

dependencyManagement {
    dependencies {
        for (depJar in rootProject.ext.dependencies) {
            dependency depJar.value
        }
    }
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
    }
}

dependencies {
    implementation 'org.projectlombok:lombok'
    implementation 'cn.hutool:hutool-all'
    implementation 'com.alibaba:fastjson'
    implementation 'org.mapstruct:mapstruct'
    implementation 'io.projectreactor:reactor-core'
    implementation 'org.redisson:redisson'

//    implementation 'ch.qos.logback:logback-classic:1.4.6'
//    implementation "org.apache.logging.log4j:log4j-core"
//    implementation "org.apache.logging.log4j:log4j-api"
//    implementation "org.apache.logging.log4j:log4j-slf4j-impl"

//    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api'
//    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
//    implementation 'org.springframework.boot:spring-boot-starter-web'
//    implementation 'org.springframework.boot:spring-boot-starter-webflux'
//    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'com.mysql:mysql-connector-j'
//    implementation 'mysql:mysql-connector-java:5.1.49'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter'
    implementation 'com.baomidou:mybatis-plus-boot-starter'
    implementation 'com.github.yulichang:mybatis-plus-join-boot-starter'

    implementation 'org.apache.flink:flink-clients'
    implementation 'org.apache.flink:flink-table-api-java'
    implementation 'org.apache.flink:flink-table-runtime'
    implementation 'org.apache.flink:flink-table-planner-loader'
    implementation 'org.apache.flink:flink-streaming-java'
    implementation 'org.apache.flink:flink-connector-files'
    implementation 'org.apache.flink:flink-connector-kafka:3.2.0-1.19'
    implementation 'org.apache.flink:flink-connector-jdbc:3.2.0-1.19'

    implementation 'org.apache.doris:flink-doris-connector-1.19:1.6.1'
    implementation 'org.slf4j:slf4j-log4j12:1.7.25'
//    implementation('org.apache.doris:flink-doris-connector-1.19:1.6.1') {
//    @TODO  logback-classic 和 slf4j-log4j12 冲突了，怎么解决 ？？？
//    http://www.slf4j.org/codes.html#StaticLoggerBinder
//        exclude group: 'org.slf4j:slf4j-log4j12'
//    }

    implementation 'org.apache.flink:flink-runtime-web'
    implementation 'org.apache.flink:flink-cep'
    implementation 'org.apache.flink:flink-connector-mysql-cdc:3.1.1'
//    implementation 'org.apache.flink:flink-cdc-common:3.1.1'
//    implementation 'org.apache.flink:flink-cdc-pipeline-connector-doris:3.1.1'
//    implementation 'org.apache.flink:flink-cdc-pipeline-connector-mysql:3.1.1'
//    implementation('org.apache.flink:flink-connector-mysql-cdc:3.1.1') {
//        exclude group: 'mysql:mysql-connector-java:8.0.28'
//    }

    implementation 'org.apache.kafka:kafka-clients'
    implementation 'org.apache.kafka:kafka-streams'
    implementation 'org.springframework.kafka:spring-kafka'

//    api "org.springframework.cloud:spring-cloud-starter-bootstrap"
//    api 'com.alibaba.nacos:nacos-client:2.2.3'
//    api('com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config') {
//        exclude group: 'com.alibaba.nacos:nacos-client'
//    }
//    api('com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery') {
//        exclude group: 'com.alibaba.nacos:nacos-client'
//    }
//    api 'com.alibaba.cloud:spring-cloud-starter-alibaba-sentinel'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor'


    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testAnnotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor'


    testFixturesImplementation 'org.projectlombok:lombok'
    testFixturesImplementation 'io.projectreactor:reactor-core'
    testFixturesImplementation 'org.springframework.boot:spring-boot-starter'
    testFixturesImplementation 'org.apache.flink:flink-streaming-java'

    testFixturesAnnotationProcessor 'org.projectlombok:lombok'
}

def profile = System.getProperty("profile") ?: "dev"
processResources {
    filesMatching('application.yml') {
        filter ReplaceTokens, tokens: [profile: profile]
    }
    filesMatching('bootstrap.yml') {
        filter ReplaceTokens, tokens: [profile: profile]
    }
}

tasks.named('test') {
    enabled = false
    useJUnitPlatform()
}
